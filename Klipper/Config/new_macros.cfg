#####################################################################
#   Macros
#####################################################################
[gcode_macro M141] 
gcode:
   {% set S = params.S|default(0)|float %} 
   SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={S}

[gcode_macro PID_PLA]
gcode:
  M106 S255
  PID_CALIBRATE HEATER=extruder TARGET=220
  M106 S0
  SAVE_CONFIG

[gcode_macro PID_ABS]
gcode:
  M106 S127
  PID_CALIBRATE HEATER=extruder TARGET=250
  M106 S0
  SAVE_CONFIG

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   #G1 E345 F1800                  ; quickly load filament to down bowden
   G1 E60 F300                    ; slower extrusion for hotend path
   G1 E20 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-200 F1800                 ; retract filament completely
   M82                            ; set extruder to absolute


[gcode_macro screenpurple]
gcode:
        SET_LED LED=btt_mini12864 RED=0.6 GREEN=0.2 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0.6 GREEN=0.2 BLUE=1 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0.6 GREEN=0.2 BLUE=1 INDEX=3 

[gcode_macro screenred]
gcode:
        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

[gcode_macro screenblue]
gcode:
        SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=3 

[gcode_macro screengreen]
gcode:
        SET_LED LED=btt_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=3 

[gcode_macro screenyellow]
gcode:
        SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=0 INDEX=3 


[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    M117 Homing
    status_homing
    G28
    M117 OGL
    status_leveling
    QUAD_GANTRY_LEVEL
    M117 Homing
    status_homing
    G28
    M117 Moving to purge bucket    
    G0 X30 Y350 Z30 F3600
    M117 Ready to purge
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    CLEAR_PAUSE
    M83
    set_nozzle_leds_on    
    status_ready
    # Load variables
   {% set bed_temp = params.BED|default(60)|int %}
   {% set initial_tool = params.TOOL|default(0)|int %}
   {% set extruder_temp = params.EXTRUDER|default(220)|int %}
   {% set probe_extruder_temp = 150 %}
   {% set chamber_target_temp = params.CHAMBER|default(0)|int %}
   #{% set chamber_start_temp = params.CHAMBERSTART|default(0)|int %}
   {% set chamber_start_temp = 0|int %}
   
   screenyellow
   #SONG_SIMPSONS
   SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={chamber_target_temp}

   screenred
   # Load bed mesh
   BED_MESH_CLEAR
   BED_MESH_PROFILE LOAD={bed_temp}    # Set and wait for bed to reach temperature
   M117 Waiting on bed
   status_heating
   
   # Pre-heat extruder to probe temp
   M104 S{probe_extruder_temp}

   M190 S{bed_temp}
   
   #Wait for a minimum of 10 minutes for everything to warm up
   #M117 10 minute warm up
   #G4 600000

   # Wait for chamber temperature
   M117 Waiting on chamber
   
   #ABS then wait until 32 degrees minimum
   {% if chamber_target_temp > 32 %}
		{% set chamber_start_temp = 32|int %}
   {% endif %}

   TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={chamber_start_temp}
   
   # Home etc
   G32
   G91
  
   # Reset extruder
   G92 E0
   # Set extruder temperature
   M117 Waiting on nozzle

   M109 S{extruder_temp}
   M117 Selecting First Filament
   
   ERCF_CHANGE_TOOL TOOL={initial_tool} STANDALONE=1
   M117 Cleaning Nozzle
   clean_nozzle

   G90
   
  # Reset extruder
   G92 E0

   # Move Z up a little
   G1 Z5.0 F3000
   M117 Printing
   status_printing
   screenpurple
   #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
   
   #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    screenblue
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear


    {% if unload|int ==1%}
      ERCF_EJECT
    {% endif %}
    M107                                     ; turn off fan

   # Disable steppers
    M84 X Y E

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
       
    #SET_GCODE_OFFSET Z=0
    set_nozzle_leds_off
    M117 Print complete
    
    #SONG_LOONEY
    screenpurple

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[output_pin beeper]
pin: EXP1_1
value: 0
shutdown_value: 0
pwm: True
cycle_time: 0.0005 ; Default beeper tone in kHz. 1 / 0.0005 = 2000Hz (2kHz)

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.P|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.S|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.9 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{50}
    {% endfor %}

[gcode_macro LCDRGB]
gcode:
    {% set r = params.R|default(1)|float %}
    {% set g = params.G|default(1)|float %}
    {% set b = params.B|default(1)|float %}

    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=3

[gcode_macro RESETRGB]
gcode:
    SET_LED LED=btt_mini12864 RED=0.6 GREEN=0.2 BLUE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.6 GREEN=0.2 BLUE=1 INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.6 GREEN=0.2 BLUE=1 INDEX=3 

[delayed_gcode SETDISPLAYNEOPIXEL]
initial_duration: 1
gcode:
    RESETRGB

[pause_resume]
recover_velocity: 300.0

[gcode_macro M600]
gcode:
    LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

#[filament_motion_sensor filament_sensor]
#detection_length: 7
#extruder: extruder
#switch_pin: PG11
#pause_on_runout: True
#insert_gcode:
#    M117 Insert Detected
#runout_gcode:
#    M117 Runout Detected
#    LCDRGB R=1 G=0 B=0  # Turn LCD red
    #SONG_STARWARS_IMP

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
         RESPOND PREFIX=tgalarm_photo MSG="Printer Paused"
    {% else %}
       RESPOND MSG="Print is already paused"
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                          ; enable filament sensor
        RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
        RESPOND PREFIX=tgalarm_photo MSG="Print Resumed"
    {% else %}
        RESPOND MSG="Print is not paused. Resume ignored"
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    ;SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    RESPOND PREFIX=tgalarm_photo MSG="Print Cancelled"


[gcode_macro PID_PLA]
gcode:
  M106 S255
  PID_CALIBRATE HEATER=extruder TARGET=210
  M106 S0
  SAVE_CONFIG

[gcode_macro PID_ABS]
gcode:
  M106 S127
  PID_CALIBRATE HEATER=extruder TARGET=250
  M106 S0
  SAVE_CONFIG

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   #G1 E345 F1800                  ; quickly load filament to down bowden
   G1 E60 F300                    ; slower extrusion for hotend path
   G1 E20 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-200 F1800                 ; retract filament completely
   M82                            ; set extruder to absolute


[gcode_macro M600]
gcode:
    LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause



#[delayed_gcode DISABLEFILAMENTSENSOR]   
#initial_duration: 1
#gcode:
#    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

# Park front center
[gcode_macro PARKFRONT]
gcode:
    _CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    _CG28                            ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    _CG28                            ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    _CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    _CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro SHUTDOWN]
gcode:
    LCDRGB R=0 G=0 B=0                               ; Turn off LCD neopixels (see above for this macro)
    OFF                                              ; Shortcut to turn everything off (see above for this macro)
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible host shutdown
	{action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    SET_FAN_SPEED FAN=Chamber SPEED=0   ; turn exhaust fan off
    SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off

[menu __main __setup __shutdown]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Shut down
gcode: SHUTDOWN

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}


